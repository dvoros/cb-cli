// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EnvironmentNetworkV4Request environment network v4 request
// swagger:model EnvironmentNetworkV4Request
type EnvironmentNetworkV4Request struct {

	// Subnet ids of the specified networks
	Aws *EnvironmentNetworkAwsV4Params `json:"aws,omitempty"`

	// Subnet ids of the specified networks
	Azure *EnvironmentNetworkAzureV4Params `json:"azure,omitempty"`

	// Network CIDR of the specified networks
	NetworkCidr string `json:"networkCidr,omitempty"`

	// Subnet CIDR's of the specified networks
	// Unique: true
	SubnetCidrs []string `json:"subnetCidrs"`

	// Subnet ids of the specified networks
	// Unique: true
	SubnetIds []string `json:"subnetIds"`
}

// Validate validates this environment network v4 request
func (m *EnvironmentNetworkV4Request) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAws(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAzure(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubnetCidrs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubnetIds(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EnvironmentNetworkV4Request) validateAws(formats strfmt.Registry) error {

	if swag.IsZero(m.Aws) { // not required
		return nil
	}

	if m.Aws != nil {
		if err := m.Aws.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("aws")
			}
			return err
		}
	}

	return nil
}

func (m *EnvironmentNetworkV4Request) validateAzure(formats strfmt.Registry) error {

	if swag.IsZero(m.Azure) { // not required
		return nil
	}

	if m.Azure != nil {
		if err := m.Azure.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azure")
			}
			return err
		}
	}

	return nil
}

func (m *EnvironmentNetworkV4Request) validateSubnetCidrs(formats strfmt.Registry) error {

	if swag.IsZero(m.SubnetCidrs) { // not required
		return nil
	}

	if err := validate.UniqueItems("subnetCidrs", "body", m.SubnetCidrs); err != nil {
		return err
	}

	return nil
}

func (m *EnvironmentNetworkV4Request) validateSubnetIds(formats strfmt.Registry) error {

	if swag.IsZero(m.SubnetIds) { // not required
		return nil
	}

	if err := validate.UniqueItems("subnetIds", "body", m.SubnetIds); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EnvironmentNetworkV4Request) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EnvironmentNetworkV4Request) UnmarshalBinary(b []byte) error {
	var res EnvironmentNetworkV4Request
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
